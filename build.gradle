plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'java'
}

group = 'com.pre_38'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	asciidoctorExtensions
}

dependencies {
	//JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//유효성검사
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//WEB
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	//Devtools(필요없으면 삭제)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//Rest Docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	//SpringSecurity 사용시 테스트에 반드시 필요 (@WithMockUser)
	testImplementation 'org.springframework.security:spring-security-test'
	//MapStruct
	implementation 'org.mapstruct:mapstruct:1.5.1.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'
	//Email
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	//Gson
	implementation 'com.google.code.gson:gson'
	//JWT
	implementation 'com.auth0:java-jwt:3.19.2'
	//OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	//AWS
//	implementation 'org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config'
}

// AWS
//dependencyManagement {
//	imports {
//		mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Hoxton.SR12"
//	}
//}

// AWS
//test {
//	useJUnitPlatform()
//}


tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	configurations "asciidoctorExtensions"
	inputs.dir snippetsDir
	dependsOn test
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("${asciidoctor.outputDir}")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

// (10)
bootJar {
	dependsOn copyDocument
	from ("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}
